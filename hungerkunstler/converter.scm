(use-modules (srfi srfi-98))
(load (string-concatenate (list (get-environment-variable "HOME")"/for/forscheme/misc.scm")))

;(define srcname (cadr(command-line)))
(define counter (make-variable 0))

(let* ((raw (read-delimited "" (current-input-port)))
       (rawlist (mytokenize "\n" raw))
       (min2sec (lambda(expr)(let*((match(string-match "([0-9]*):" expr))
                                   (num(if(eq? match #f)(string->number expr)(+(* 60 (string->number(match:substring match 1)))(string->number(string-drop expr(inc(string-index expr #\:)))) )))
                                   (res(lambda()(number->string num)))
                               )(res))))
       (rawlist (map(lambda(line)(let*
                                   ((res(string-match "<!--([^-]*)-->"  line))
                                   (func(lambda(num)(format #f "<span id=\"~a\" data-endon=\"~a\">~%</span>" (begin(inc-var counter)(variable-ref counter))(min2sec num)))))
                                        (if(eq? #f res)line (func(match:substring res 1)))))rawlist))
       (count (length rawlist))
       (my-extractor (letrec ((inner(lambda(x)'TODO)))
                       'TODO))
       (res(lambda()(map (lambda(line)(format #t "~a~%" line))rawlist)))
       )(res))
